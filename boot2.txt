	

    org 0x0500
    jmp 0x0000:start
     
    string1: db "                 Bem-vindo ao bootloader do sucesso !!", 10, 10, 10, 13
    strlen1: equ $-string1
    string2: db "                 Sai do meio cachorro !!", 10, 10, 10, 13
    strlen2: equ $-string2
    string3: db "                 Carregando...", 10, 10, 10, 13
    strlen3: equ $-string3;
    string4: db "                 Bem-Vindo!", 10, 10, 10, 13
    strlen4: equ $-string4;
    string5: db "                 Aperte enter para dar a sipuada !!", 10, 10, 10, 13
    strlen5: equ $-string5;
    string6: db "                 Ai ta certo !!", 10, 10, 10, 13
    strlen6: equ $-string6;
     
     
    imprimi:
     
         mov bx, 0
         
        .inicio:
     
        cmp bx, cx
        je .fim
     
        mov byte al, [si + bx]
        mov ah, 0x0E
        int 10h
        inc bx
        jmp .inicio
     
      .fim:
     
    ret
    imprimi2:
        mov bx, 0
         
        .inicio:
     
        cmp bx, cx
        je .fim
     
        mov byte al, [si + bx]
        mov ah, 0x0E
        int 10h
        inc bx


        push cx     ;para poder fazer a comparação e printar a string todo devagar
        mov ah, 86h ; para ir mais de vagar 
        mov cx, 1   
        mov dx, 25  
        int 15h
        pop cx      
        jmp .inicio
     
      .fim:
     
    ret
     
    funcao: ;funcao pra esperar a pessoa digitar enter
       
         mov si, string5
         mov cx, strlen5
         call imprimi
     
        
       
        mov ah, 0x0
        int 16h
     
       
       
         mov si, string6
         mov cx, strlen6
        call imprimi
     
    ret      
     
    start:
     
           
            xor ax, ax
            mov ds, ax
     
            mov ah, 00h ;funcao pra dar um clear na tela
            mov al, 03h
            int 10h
     
            mov ah,0xb ;funcao pra mudar a cor do fundo
            mov bh, 0x0
            mov bl, 4
            int 10h
           
            mov si, string1
            mov cx, strlen1
            call imprimi
           
            mov si, string2
            mov cx, strlen2
            call imprimi
     
            call funcao


           
            mov si, string3
            mov cx, strlen3
            call imprimi2

            
     
            mov si, string4
            mov cx, strlen4
            call imprimi2

            


Kernelzin:

    ;Carrega o kernel no endereço 0x7e00, como já foi falado no boot1
    MOV ax, 0x07e0  ;segmento do kernel
    MOV es, ax  
    XOR bx, bx      ;offset do kernel
    

    ;Ler setor do disco
    MOV ah, 0x02    ; já explicado no boot1
    MOV al, 50  ; ler 50 setores
    MOV ch, 0x00    ; trilha 0
    MOV cl, 0x04    ; setor 4
    MOV dh, 0x00    ; cabeça 0
    MOV dl, 0x00    ; drive 
    int 13h 

    jmp 0x07e0 : 0x0